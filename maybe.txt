
export type Maybe<TheType> = {
	value: TheType;
};

export function loadMaybe<TheType>(slice: Slice, loadTheType: (slice: Slice) => TheType): Maybe<TheType> {
	return {
		value: loadTheType(slice)
	};
}

export function storeMaybe<TheType>(maybe: Maybe<TheType>, storeSubType: (TheType: TheType) => ((builder: Builder) => void)): Builder {
	return (builder: Builder) => {
		storeSubType(maybe.value)(builder);
	};
}

export type TheJust = {
	x: Maybe<number>
};

function loadTheNumber(slice: Slice): number {
	return slice.loadUint(32);
}

function storeTheNumber(n: number): ((builder: Builder) => void) {
	return (builder: Builder) =>  {
		builder.storeUint(n, 32);
	}
}

export function loadTheJust(slice: Slice): TheJust {
	return {
		x: loadMaybe<number>(slice, loadTheNumber)
	};
}
export function storeTheJust(theJust: TheJust): Builder {
	return (builder: Builder) => {
		storeMaybe<number>(theJust.x, storeTheNumber)(builder);
	};
}



export type Example = {
	value: number;
	x: number;
};
export function loadExample(slice: Slice, x: number): Example {
	return {
		value: slice.loadUint(x),
		x: x
	};
}
export function storeExample(example: Example): Builder {
	return (builder: Builder) => {
		builder.storeUint(example.value, example.x)
	};
}

export type BitInteger = {
	e: Example;
};
export function loadBitInteger(slice: Slice): BitInteger {
	return {
		e: loadExample(slice, 4)
	};
}
export function storeBitInteger(bitInteger: BitInteger): Builder {
	return (builder: Builder) => {
		storeExample(bitInteger.e)(builder);
	};
}



export type Example2 = {
	value: number;
	x: number;
};
export function loadExample2(slice: Slice, x: number): Example {
	return {
		value: slice.loadUint(x / 2),
		x: x / 2
	};
}
export function storeExample2(example: Example2): Builder {
	return (builder: Builder) => {
		builder.storeUint(example.value, example.x)
	};
}

export type BitInteger2 = {
	e: Example2;
};
export function loadBitInteger2(slice: Slice): BitInteger2 {
	return {
		e: loadExample2(slice, 4)
	};
}
export function storeBitInteger2(bitInteger: BitInteger2): Builder {
	return (builder: Builder) => {
		storeExample2(bitInteger.e)(builder);
	};
}
